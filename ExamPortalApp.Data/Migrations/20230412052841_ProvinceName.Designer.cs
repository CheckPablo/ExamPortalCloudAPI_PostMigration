// <auto-generated />
using System;
using ExamPortalApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExamPortalApp.Data.Migrations
{
    [DbContext(typeof(ExamPortalDatabaseContext))]
    [Migration("20230412052841_ProvinceName")]
    partial class ProvinceName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspnetUsersInRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__aspnet_U__AF2760AD5F7251C8");

                    b.HasIndex(new[] { "RoleId" }, "aspnet_UsersInRoles_index");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RoleId" }, "aspnet_UsersInRoles_index"), 90);

                    b.ToTable("aspnet_UsersInRoles", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerDesc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<string>("OptionCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AnswerId" }, "IX_Answers_AnswerId");

                    b.HasIndex(new[] { "AnswerId", "QuestionId" }, "IX_Answers_AnswerId_QuestionId")
                        .IsUnique();

                    b.HasIndex(new[] { "QuestionId" }, "IX_Answers_QuestionId");

                    b.HasIndex(new[] { "QuestionId", "AnswerId", "AnswerDesc", "OptionCode" }, "IX_Answers_QuestionId_AnswerId_AnswerDesc_OptionCode");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AnswerMultiple", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CodeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AnswerMultiples");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AnswerProgressTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnswerCount")
                        .HasColumnType("int");

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TestId", "StudentId" }, "IX_AnswerProgressTrackings_TestId_StudentId");

                    b.ToTable("AnswerProgressTrackings");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AnswerText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AnswerTexts");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetApplication", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LoweredApplicationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ApplicationId")
                        .HasName("PK__aspnet_A__C93A4C98CED8A85C");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ApplicationId"), false);

                    b.HasIndex(new[] { "LoweredApplicationName" }, "UQ__aspnet_A__17477DE43F4045CA")
                        .IsUnique();

                    b.HasIndex(new[] { "ApplicationName" }, "UQ__aspnet_A__3091033139F4CAB8")
                        .IsUnique();

                    b.HasIndex(new[] { "LoweredApplicationName" }, "aspnet_Applications_Index");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "LoweredApplicationName" }, "aspnet_Applications_Index"));
                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LoweredApplicationName" }, "aspnet_Applications_Index"), 90);

                    b.ToTable("aspnet_Applications", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetMembership", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("FailedPasswordAnswerAttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FailedPasswordAnswerAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<int>("FailedPasswordAttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FailedPasswordAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLockoutDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastPasswordChangedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LoweredEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MobilePin")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("MobilePIN");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PasswordAnswer")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("PasswordFormat")
                        .HasColumnType("int");

                    b.Property<int?>("PasswordQuestion")
                        .HasColumnType("int");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId")
                        .HasName("PK__aspnet_M__1788CC4DCD837534");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("UserId"), false);

                    b.HasIndex("ApplicationId");

                    b.ToTable("aspnet_Membership", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetPath", b =>
                {
                    b.Property<Guid>("PathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoweredPath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PathId")
                        .HasName("PK__aspnet_P__CD67DC58395E0EF9");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("PathId"), false);

                    b.HasIndex(new[] { "ApplicationId", "LoweredPath" }, "aspnet_Paths_index")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "ApplicationId", "LoweredPath" }, "aspnet_Paths_index"));
                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ApplicationId", "LoweredPath" }, "aspnet_Paths_index"), 90);

                    b.ToTable("aspnet_Paths", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetPersonalizationAllUser", b =>
                {
                    b.Property<Guid>("PathId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PageSettings")
                        .IsRequired()
                        .HasColumnType("image");

                    b.HasKey("PathId")
                        .HasName("PK__aspnet_P__CD67DC59EDC10811");

                    b.ToTable("aspnet_PersonalizationAllUsers", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetPersonalizationPerUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PageSettings")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<Guid?>("PathId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__aspnet_P__3214EC06F3D7E7E5");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex(new[] { "PathId", "UserId" }, "aspnet_PersonalizationPerUser_index1")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "PathId", "UserId" }, "aspnet_PersonalizationPerUser_index1"));
                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PathId", "UserId" }, "aspnet_PersonalizationPerUser_index1"), 90);

                    b.HasIndex(new[] { "UserId", "PathId" }, "aspnet_PersonalizationPerUser_ncindex2")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL AND [PathId] IS NOT NULL");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UserId", "PathId" }, "aspnet_PersonalizationPerUser_ncindex2"), 90);

                    b.ToTable("aspnet_PersonalizationPerUser", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PropertyNames")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<byte[]>("PropertyValuesBinary")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<string>("PropertyValuesString")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("UserId")
                        .HasName("PK__aspnet_P__1788CC4CAF9D5AE4");

                    b.ToTable("aspnet_Profile", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LoweredRoleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("RoleId")
                        .HasName("PK__aspnet_R__8AFACE1BE0E47F96");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("RoleId"), false);

                    b.HasIndex(new[] { "ApplicationId", "LoweredRoleName" }, "aspnet_Roles_index1")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "ApplicationId", "LoweredRoleName" }, "aspnet_Roles_index1"));
                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ApplicationId", "LoweredRoleName" }, "aspnet_Roles_index1"), 90);

                    b.ToTable("aspnet_Roles", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetSchemaVersion", b =>
                {
                    b.Property<string>("Feature")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CompatibleSchemaVersion")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsCurrentVersion")
                        .HasColumnType("bit");

                    b.HasKey("Feature", "CompatibleSchemaVersion")
                        .HasName("PK__aspnet_S__5A1E6BC1BD356993");

                    b.ToTable("aspnet_SchemaVersions", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LoweredUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MobileAlias")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("UserId")
                        .HasName("PK__aspnet_U__1788CC4DDBEBEFD3");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("UserId"), false);

                    b.HasIndex(new[] { "ApplicationId", "LoweredUserName" }, "aspnet_Users_Index")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "ApplicationId", "LoweredUserName" }, "aspnet_Users_Index"));
                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ApplicationId", "LoweredUserName" }, "aspnet_Users_Index"), 90);

                    b.HasIndex(new[] { "ApplicationId", "LastActivityDate" }, "aspnet_Users_Index2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ApplicationId", "LastActivityDate" }, "aspnet_Users_Index2"), 90);

                    b.ToTable("aspnet_Users", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("BitAbsent")
                        .HasColumnType("bit");

                    b.Property<bool>("BitLangChanged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<int?>("TestQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TestId");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.BckaStimulusText", b =>
                {
                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<int?>("StimulusId")
                        .HasColumnType("int")
                        .HasColumnName("StimulusID");

                    b.Property<string>("StimulusText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("StimulusTextId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StimulusTextID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StimulusTextId"));

                    b.ToTable("bckaStimulusText", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.BcktQuestion", b =>
                {
                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NoteId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("NoteID");

                    b.Property<string>("QuestionCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.Property<string>("QuestionInstruction")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("QuestionStem")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("QuestionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionTypeID");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<int?>("StimulusId")
                        .HasColumnType("int")
                        .HasColumnName("StimulusID");

                    b.ToTable("bcktQuestion", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.BufferATestQuestion", b =>
                {
                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.Property<int?>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    b.Property<int>("TestQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestQuestionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestQuestionId"));

                    b.ToTable("buffer_aTestQuestion", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.BufferTQuestion", b =>
                {
                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NoteId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("NoteID");

                    b.Property<string>("QuestionCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.Property<string>("QuestionInstruction")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("QuestionStem")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("QuestionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionTypeID");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<int?>("StimulusId")
                        .HasColumnType("int")
                        .HasColumnName("StimulusID");

                    b.ToTable("buffer_tQuestion", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.BulkImportPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<int>("CenterNo")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("ImportDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Imported")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id")
                        .HasName("PK__BulkImportPeople");

                    b.HasIndex("StudentId");

                    b.ToTable("BulkImportPeople");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.BulkImportSectorSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("BulkImportId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ImportDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Imported")
                        .HasColumnType("bit");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SectorCode")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("StudentSubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__BulkImportSectorSubject");

                    b.HasIndex("BulkImportId");

                    b.HasIndex("SectorId");

                    b.HasIndex("StudentSubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("BulkImportSectorSubjects");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Center", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AttendanceRegisterPassword")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CenterNo")
                        .HasColumnType("int");

                    b.Property<int?>("CenterTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Disclaimer")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int?>("MaximumLicense")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CenterTypeId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Centers");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.CenterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)");

                    b.HasKey("Id")
                        .HasName("PK__CenterTypes");

                    b.ToTable("CenterTypes");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.CenterTypes1", b =>
                {
                    b.Property<int>("CenterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CenterTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CenterTypeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("CenterTypeId")
                        .HasName("PK__lCenterT__790E764CE79327AC");

                    b.ToTable("CenterTypes1", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.DisclaimerAccept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int?>("OldStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("OldTestId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__DisclaimerAccepts");

                    b.HasIndex("StudentId");

                    b.HasIndex(new[] { "TestId", "StudentId" }, "IX_TestId_StudentId");

                    b.ToTable("DisclaimerAccepts");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PhysicalFile")
                        .HasColumnType("image");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.InvigilatorStudentLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateModifed")
                        .HasColumnType("datetime");

                    b.Property<int?>("InvigilatorId")
                        .HasColumnType("int");

                    b.Property<int?>("OldStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__InvigilatorStudentLinks");

                    b.HasIndex("StudentId");

                    b.HasIndex(new[] { "InvigilatorId", "StudentId" }, "IX_InvigilatorId_StudentId");

                    b.ToTable("InvigilatorStudentLinks");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Irregularity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateModifed")
                        .HasColumnType("datetime");

                    b.Property<bool?>("FullScreenClosed")
                        .HasColumnType("bit");

                    b.Property<bool?>("KeyPress")
                        .HasColumnType("bit");

                    b.Property<bool?>("LeftExamArea")
                        .HasColumnType("bit");

                    b.Property<bool?>("Offline")
                        .HasColumnType("bit");

                    b.Property<int?>("OldStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("OldTestId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Irregula__269B16718B26737B");

                    b.HasIndex("StudentId");

                    b.HasIndex(new[] { "TestId", "StudentId" }, "IDXTest_StudentID");

                    b.ToTable("Irregularities");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.KeyPressTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Event")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("OldStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("OldTestId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_KeyPress");

                    b.HasIndex("TestId");

                    b.HasIndex(new[] { "StudentId", "TestId" }, "IX_StudentId_TestId");

                    b.ToTable("KeyPressTrackings");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__lLanguag__B938558B8A2A6A32");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Medium", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PhysicalFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_tMedia");

                    b.HasIndex(new[] { "Id" }, "MediaID");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "MediaID"), 90);

                    b.HasIndex(new[] { "Removed" }, "Removed");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Removed" }, "Removed"), 90);

                    b.ToTable("Media");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Reference")
                        .HasColumnType("int");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__tNote__EACE357F11F1BBF1");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.NumberOfCandidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__NumberOf__3214EC279D35C5E6");

                    b.ToTable("NumberOfCandidates");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("QuestionInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionStem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<int?>("StimulusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("StimulusId");

                    b.HasIndex(new[] { "Id", "StimulusId" }, "IX_Questions_Id_StimulusId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.RandomOtp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OldSectorId")
                        .HasColumnType("int");

                    b.Property<int?>("OldSubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("OldTestId")
                        .HasColumnType("int");

                    b.Property<int>("Otp")
                        .HasColumnType("int")
                        .HasColumnName("OTP");

                    b.Property<DateTime?>("OtpexpiryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("OTPExpiryDate");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_RandomOTP");

                    b.HasIndex("SectorId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TestId");

                    b.HasIndex(new[] { "CenterId", "SectorId", "SubjectId", "TestId" }, "IX_RandomOTPs");

                    b.HasIndex(new[] { "Otp" }, "NonClusteredIndex-OTP");

                    b.ToTable("RandomOTPs", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__lRating__FCCDF85CDE2A2ED2");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__Region__ACD844430335FEC3");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Role", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Screenshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("ScreenshotData")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Screensh__DFD702D8B6DF1F20");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.ToTable("Screenshots");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.SebSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HashDescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MacSebsettings")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("MacSEBSettings");

                    b.Property<string>("Sebsettings")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SEBSettings");

                    b.HasKey("Id")
                        .HasName("PK__SEBsetti__174A327D1D94BAF0");

                    b.ToTable("SebSettings");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Stimulus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("HasImage")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("StimulusInstruction")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("StimulusTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HasImage" }, "HasImage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HasImage" }, "HasImage"), 90);

                    b.HasIndex(new[] { "Removed" }, "Removed");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Removed" }, "Removed"), 90);

                    b.HasIndex(new[] { "SectionId" }, "SectionID");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SectionId" }, "SectionID"), 90);

                    b.HasIndex(new[] { "SectorId" }, "SectorID");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SectorId" }, "SectorID"), 90);

                    b.HasIndex(new[] { "Id" }, "StimulusID");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "StimulusID"), 90);

                    b.HasIndex(new[] { "StimulusTypeId" }, "StimulusTypeID");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StimulusTypeId" }, "StimulusTypeID"), 90);

                    b.ToTable("Stimuli");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StimulusImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<int>("StimulusId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_aStimulusImage");

                    b.HasIndex(new[] { "ImageId", "StimulusId" }, "IX_StimulusImages")
                        .IsUnique();

                    b.HasIndex(new[] { "ImageId" }, "ImageID");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ImageId" }, "ImageID"), 90);

                    b.HasIndex(new[] { "Removed" }, "Removed");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Removed" }, "Removed"), 90);

                    b.HasIndex(new[] { "StimulusId" }, "StimulusID");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StimulusId" }, "StimulusID"), 90);

                    b.HasIndex(new[] { "Id" }, "UQ__aStimulu__1619A5C21C2B9801")
                        .IsUnique();

                    b.ToTable("StimulusImages");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StimulusMedium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<int>("StimulusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StimulusId");

                    b.HasIndex(new[] { "MediaId", "StimulusId" }, "IX_StimulusMedia")
                        .IsUnique();

                    b.ToTable("StimulusMedia");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StimulusText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<int?>("StimulusId")
                        .HasColumnType("int");

                    b.Property<string>("StimulusText1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StimulusText");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StimulusId" }, "IX_StimulusText");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StimulusId" }, "IX_StimulusText"), 90);

                    b.ToTable("StimulusTexts");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StimulusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__lStimulu__0C07AF7C36E62C1B");

                    b.ToTable("StimulusTypes");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<int?>("CertLangId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ExamNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<int?>("OldRegionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordEncrypted")
                        .HasMaxLength(64)
                        .HasColumnType("binary(64)")
                        .IsFixedLength();

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Salt")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<bool?>("SentConfirmation")
                        .HasColumnType("bit");

                    b.Property<string>("StudentNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Updated")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_Student");

                    b.HasIndex("CertLangId");

                    b.HasIndex("RegionId");

                    b.HasIndex(new[] { "CenterId" }, "CenterID");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CenterId" }, "CenterID"), 90);

                    b.HasIndex(new[] { "Name" }, "IDXName");

                    b.HasIndex(new[] { "SectorId" }, "IDXSector");

                    b.HasIndex(new[] { "Removed" }, "Remove");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Removed" }, "Remove"), 90);

                    b.HasIndex(new[] { "Id" }, "StudentID");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "StudentID"), 90);

                    b.HasIndex(new[] { "Updated" }, "Update");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Updated" }, "Update"), 90);

                    b.HasIndex(new[] { "Id" }, "_dta_index_tStudent_18_1778105375__K1_4");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "_dta_index_tStudent_18_1778105375__K1_4"), 90);

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StudentProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("HasMulti")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("TimeRemaining")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__tStudent__C7ABDEA89BCCDEA2");

                    b.HasIndex(new[] { "StudentId", "TestId", "QuestionId", "AnswerId" }, "IX_StudentProgress")
                        .IsUnique();

                    b.HasIndex(new[] { "TestId", "StudentId" }, "_dta_index_tStudentProgress_18_1563152614__K3_K2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TestId", "StudentId" }, "_dta_index_tStudentProgress_18_1563152614__K3_K2"), 90);

                    b.HasIndex(new[] { "TestId", "StudentId", "QuestionId", "AnswerId", "Id" }, "_dta_index_tStudentProgress_18_1563152614__K3_K2_K4_K7_K1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TestId", "StudentId", "QuestionId", "AnswerId", "Id" }, "_dta_index_tStudentProgress_18_1563152614__K3_K2_K4_K7_K1"), 90);

                    b.ToTable("StudentProgress", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StudentProgressTestUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accomodation")
                        .HasColumnType("bit");

                    b.Property<bool?>("ElectronicReader")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsAbsent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("StudentExtraTime")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("TimeRemaining")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.HasKey("Id")
                        .HasName("PK__tStudent__C7ABDEA8CAF79D33");

                    b.HasIndex(new[] { "StudentId", "TestId" }, "IDXStudent_TestID");

                    b.HasIndex(new[] { "TestId", "StudentId" }, "IX_StudentProgressTestUploads")
                        .IsUnique()
                        .HasFilter("[TestId] IS NOT NULL AND [StudentId] IS NOT NULL");

                    b.ToTable("StudentProgressTestUploads");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StudentRetriefe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("EncryptedText")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<int?>("OldStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__StudentP__87F839308898F770");

                    b.HasIndex(new[] { "StudentId" }, "IDXStudentID");

                    b.ToTable("StudentRetrieves");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StudentSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("OldSubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__aStudent__54F6B8C150939476");

                    b.HasIndex("SubjectId");

                    b.HasIndex(new[] { "CandidateId", "SubjectId" }, "IDXCandidate_SubjectID");

                    b.ToTable("StudentSubjects");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StudentTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Absent")
                        .HasColumnType("bit");

                    b.Property<bool?>("Accomodation")
                        .HasColumnType("bit");

                    b.Property<bool?>("ElectronicReader")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LoginUid")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OldStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("OldTestId")
                        .HasColumnType("int");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StudentExtraTime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<bool?>("TestLoadedInBrowser")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex(new[] { "StudentId", "TestId" }, "IX_StudentTests");

                    b.ToTable("StudentTests");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StudentTestLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OldStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("OldTestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProcessName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_StudentTestLog");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.ToTable("StudentTestLogs");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_lSubject");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex(new[] { "Id" }, "PKSubjectID")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "Id" }, "PKSubjectID"));

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Target", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__lTarget__2B1F0FB64734E311");

                    b.ToTable("Targets");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlternateTestId")
                        .HasColumnType("int");

                    b.Property<bool?>("AnswerScanningAvailable")
                        .HasColumnType("bit");

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OldCenterId")
                        .HasColumnType("int");

                    b.Property<int?>("OldSectorId")
                        .HasColumnType("int");

                    b.Property<int?>("OldSubjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaperExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TestCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TestCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("TestDuration")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TestIntro")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TestName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("TestSecurityLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("TestTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("Tts")
                        .HasColumnType("bit");

                    b.Property<bool?>("WorkOffline")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_tTest");

                    b.HasIndex("CenterId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SectorId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TestCategoryId");

                    b.HasIndex("TestSecurityLevelId");

                    b.HasIndex("TestTypeId");

                    b.HasIndex(new[] { "Id", "SubjectId", "ExamId", "CenterId" }, "NonClusteredIndex-20200723-181115");

                    b.HasIndex(new[] { "PaperExpiryDate" }, "NonClusteredIndex-20210726-134543");

                    b.HasIndex(new[] { "Id" }, "_dta_index_tTest_18_151671588__K1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Id" }, "_dta_index_tTest_18_151671588__K1"), 90);

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.TestCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__lTestCat__2CE3751DC4238E9D");

                    b.ToTable("TestCategories");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.TestQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex(new[] { "TestId", "Id" }, "IX_TestQuestions");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.TestSecurityLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id")
                        .HasName("PK__TestSecu__4064EDEA36A11696");

                    b.ToTable("TestSecurityLevels");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.TestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__lTestTyp__9BB87646E25BCB6F");

                    b.ToTable("TestTypes");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.TmpBckasn", b =>
                {
                    b.Property<int>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<int?>("HasMulti")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Removed")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int>("StudentProgressId")
                        .HasColumnType("int")
                        .HasColumnName("StudentProgressID");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    b.Property<string>("TestQuestionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TestQuestionID");

                    b.Property<string>("TimeRemaining")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.ToTable("tmpBCKasns", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.UploadedAnswerDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateModifed")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("OldTestId")
                        .HasColumnType("int");

                    b.Property<byte[]>("TestDocument")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__tUploade__A693271ADC4F3997");

                    b.HasIndex(new[] { "TestId" }, "IX_tUploadedAnswerDocument");

                    b.ToTable("UploadedAnswerDocuments");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.UploadedSourceDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("OldTestId")
                        .HasColumnType("int");

                    b.Property<byte[]>("TestDocument")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__tUploade__1ABEEF6FCC72D0BF");

                    b.HasIndex(new[] { "TestId" }, "IDXTestID");

                    b.ToTable("UploadedSourceDocuments");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.UploadedTest", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<byte[]>("TestDocument")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id")
                        .HasName("PK_tUploadedTest");

                    b.ToTable("UploadedTests");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<int?>("CenterTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ContactDetails")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsSchoolAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("NumberOfCandidates")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("TermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<string>("UserEmailAddress")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Username")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("VsoftApproved")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("CenterTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.UserDocumentAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)");

                    b.Property<int?>("OldTestId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("TestDocument")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__tbUserDo__40A359E395DBA442");

                    b.HasIndex("StudentId");

                    b.HasIndex(new[] { "TestId", "StudentId" }, "IDXStudent_TestID");

                    b.ToTable("UserDocumentAnswers");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.UserDocumentAnswersBackup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)");

                    b.Property<int?>("OldStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("OldTestId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("TestDocument")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.ToTable("UserDocumentAnswersBackups");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<int?>("OldCenterId")
                        .HasColumnType("int");

                    b.Property<int?>("OldUserId")
                        .HasColumnType("int");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.UserScannedImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Complete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OldStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("OldTestId")
                        .HasColumnType("int");

                    b.Property<string>("Otp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OTP");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_tUserScannedImage");

                    b.HasIndex("TestId");

                    b.HasIndex(new[] { "StudentId", "TestId", "Otp" }, "IX_Student_Test");

                    b.ToTable("UserScannedImages");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.VwAspnetApplication", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LoweredApplicationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_Applications", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.VwAspnetMembershipUser", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("FailedPasswordAnswerAttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FailedPasswordAnswerAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<int>("FailedPasswordAttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FailedPasswordAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastLockoutDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastPasswordChangedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LoweredEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MobileAlias")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("MobilePin")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("MobilePIN");

                    b.Property<string>("PasswordAnswer")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("PasswordFormat")
                        .HasColumnType("int");

                    b.Property<int?>("PasswordQuestion")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_MembershipUsers", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.VwAspnetProfile", b =>
                {
                    b.Property<int?>("DataSize")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_Profiles", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.VwAspnetRole", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LoweredRoleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_Roles", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.VwAspnetUser", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LoweredUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MobileAlias")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_Users", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.VwAspnetUsersInRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_UsersInRoles", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.VwAspnetWebPartStatePath", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoweredPath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("PathId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_WebPartState_Paths", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.VwAspnetWebPartStateShared", b =>
                {
                    b.Property<int?>("DataSize")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("PathId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_WebPartState_Shared", (string)null);
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.VwAspnetWebPartStateUser", b =>
                {
                    b.Property<int?>("DataSize")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PathId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_WebPartState_User", (string)null);
                });

            modelBuilder.Entity("AspnetUsersInRole", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.AspnetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Us__RoleI__278EDA44");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.AspnetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Us__UserI__2882FE7D");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Answer", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_Answers_Questions");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetMembership", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.AspnetApplication", "Application")
                        .WithMany("AspnetMemberships")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Me__Appli__1387E197");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.AspnetUser", "User")
                        .WithOne("AspnetMembership")
                        .HasForeignKey("ExamPortalApp.Contracts.Data.Entities.AspnetMembership", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Me__UserI__1293BD5E");

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetPath", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.AspnetApplication", "Application")
                        .WithMany("AspnetPaths")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Pa__Appli__1A34DF26");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetPersonalizationAllUser", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.AspnetPath", "Path")
                        .WithOne("AspnetPersonalizationAllUser")
                        .HasForeignKey("ExamPortalApp.Contracts.Data.Entities.AspnetPersonalizationAllUser", "PathId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Pe__PathI__1C1D2798");

                    b.Navigation("Path");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetPersonalizationPerUser", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.AspnetPath", "Path")
                        .WithMany("AspnetPersonalizationPerUsers")
                        .HasForeignKey("PathId")
                        .HasConstraintName("FK__aspnet_Pe__PathI__1E05700A");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.AspnetUser", "User")
                        .WithMany("AspnetPersonalizationPerUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__aspnet_Pe__UserI__1EF99443");

                    b.Navigation("Path");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetProfile", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.AspnetUser", "User")
                        .WithOne("AspnetProfile")
                        .HasForeignKey("ExamPortalApp.Contracts.Data.Entities.AspnetProfile", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Pr__UserI__21D600EE");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetRole", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.AspnetApplication", "Application")
                        .WithMany("AspnetRoles")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Ro__Appli__23BE4960");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetUser", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.AspnetApplication", "Application")
                        .WithMany("AspnetUsers")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Us__Appli__25A691D2");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Assessment", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Student", "Student")
                        .WithMany("Assessments")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Assessments_Students");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Subject", "Subject")
                        .WithMany("Assessments")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_Assessments_Subjects");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Test", "Test")
                        .WithMany("Assessments")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_Assessments_Tests");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.TestQuestion", "TestQuestion")
                        .WithMany("Assessments")
                        .HasForeignKey("TestQuestionId")
                        .HasConstraintName("FK_Assessments_TestQuestions");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Test");

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.BulkImportPerson", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Student", "Student")
                        .WithMany("BulkImportPeople")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_BulkImportPeople_Students");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.BulkImportSectorSubject", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.BulkImportPerson", "BulkImport")
                        .WithMany("BulkImportSectorSubjects")
                        .HasForeignKey("BulkImportId")
                        .HasConstraintName("FK__BulkImpor__BulkI__0C90CB45");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Grade", "SectorNavigation")
                        .WithMany("BulkImportSectorSubjects")
                        .HasForeignKey("SectorId")
                        .HasConstraintName("FK_BulkImportSectorSubjects_Sectors");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.StudentSubject", "StudentSubject")
                        .WithMany("BulkImportSectorSubjects")
                        .HasForeignKey("StudentSubjectId")
                        .HasConstraintName("FK_BulkImportSectorSubjects_StudentSubjects");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Subject", "SubjectNavigation")
                        .WithMany("BulkImportSectorSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_BulkImportSectorSubjects_Subjects");

                    b.Navigation("BulkImport");

                    b.Navigation("SectorNavigation");

                    b.Navigation("StudentSubject");

                    b.Navigation("SubjectNavigation");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Center", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.CenterType", "CenterType")
                        .WithMany("Centers")
                        .HasForeignKey("CenterTypeId")
                        .HasConstraintName("FK_Centers_CenterTypes");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Province", "Province")
                        .WithMany("Centers")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_Centers_Provinces");

                    b.Navigation("CenterType");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.DisclaimerAccept", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Student", "Student")
                        .WithMany("DisclaimerAccepts")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_DisclaimerAccepts_Students");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Test", "Test")
                        .WithMany("DisclaimerAccepts")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_DisclaimerAccepts_Tests");

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Grade", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Center", "Center")
                        .WithMany("Sectors")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK_Sectors_Centers");

                    b.Navigation("Center");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.InvigilatorStudentLink", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Student", "Student")
                        .WithMany("InvigilatorStudentLinks")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_InvigilatorStudentLinks_Students");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Irregularity", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Student", "Student")
                        .WithMany("Irregularities")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Irregularities_Students");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Test", "Test")
                        .WithMany("Irregularities")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_Irregularities_Tests");

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.KeyPressTracking", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Student", "Student")
                        .WithMany("KeyPressTrackings")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_KeyPressTrackings_Students");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Test", "Test")
                        .WithMany("KeyPressTrackings")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_KeyPressTrackings_Tests");

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Question", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .HasConstraintName("FK_Questions_QuestionTypes");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Stimulus", "Stimulus")
                        .WithMany("Questions")
                        .HasForeignKey("StimulusId")
                        .HasConstraintName("FK_Questions_Stimuli");

                    b.Navigation("QuestionType");

                    b.Navigation("Stimulus");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.RandomOtp", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Center", "Center")
                        .WithMany("RandomOtps")
                        .HasForeignKey("CenterId")
                        .IsRequired()
                        .HasConstraintName("FK_RandomOTPs_Centers");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Grade", "Sector")
                        .WithMany("RandomOtps")
                        .HasForeignKey("SectorId")
                        .HasConstraintName("FK_RandomOTPs_Sectors");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Subject", "Subject")
                        .WithMany("RandomOtps")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_RandomOTPs_Subjects");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Test", "Test")
                        .WithMany("RandomOtps")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_RandomOTPs_Tests");

                    b.Navigation("Center");

                    b.Navigation("Sector");

                    b.Navigation("Subject");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Screenshot", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Student", "Student")
                        .WithMany("Screenshots")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Screenshots_Students");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Test", "Test")
                        .WithMany("Screenshots")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_Screenshots_Tests");

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Stimulus", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Grade", "Sector")
                        .WithMany("Stimuli")
                        .HasForeignKey("SectorId")
                        .IsRequired()
                        .HasConstraintName("FK_Stimuli_Sectors");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.StimulusType", "StimulusType")
                        .WithMany("Stimuli")
                        .HasForeignKey("StimulusTypeId")
                        .HasConstraintName("FK_Stimuli_StimulusTypes");

                    b.Navigation("Sector");

                    b.Navigation("StimulusType");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StimulusImage", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Image", "Image")
                        .WithMany("StimulusImages")
                        .HasForeignKey("ImageId")
                        .IsRequired()
                        .HasConstraintName("FK_StimulusImages_Images");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Stimulus", "Stimulus")
                        .WithMany("StimulusImages")
                        .HasForeignKey("StimulusId")
                        .IsRequired()
                        .HasConstraintName("FK_StimulusImages_Stimuli");

                    b.Navigation("Image");

                    b.Navigation("Stimulus");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StimulusMedium", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Medium", "Media")
                        .WithMany("StimulusMedia")
                        .HasForeignKey("MediaId")
                        .IsRequired()
                        .HasConstraintName("FK_StimulusMedia_Media");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Stimulus", "Stimulus")
                        .WithMany("StimulusMedia")
                        .HasForeignKey("StimulusId")
                        .IsRequired()
                        .HasConstraintName("FK_StimulusMedia_Stimuli");

                    b.Navigation("Media");

                    b.Navigation("Stimulus");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StimulusText", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Stimulus", "Stimulus")
                        .WithMany("StimulusTexts")
                        .HasForeignKey("StimulusId")
                        .HasConstraintName("FK_StimulusTexts_Stimuli");

                    b.Navigation("Stimulus");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Student", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Center", "Center")
                        .WithMany("Students")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK_Students_Centers");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Language", "CertLang")
                        .WithMany("Students")
                        .HasForeignKey("CertLangId")
                        .HasConstraintName("FK_Students_Languages");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Region", "Region")
                        .WithMany("Students")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Students_Regions");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Grade", "Sector")
                        .WithMany("Students")
                        .HasForeignKey("SectorId")
                        .HasConstraintName("FK_Students_Sectors");

                    b.Navigation("Center");

                    b.Navigation("CertLang");

                    b.Navigation("Region");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StudentRetriefe", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Student", "Student")
                        .WithMany("StudentRetrieves")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentRetrieves_Students");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StudentSubject", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_StudentSubjects_Subjects");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StudentTest", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Student", "Student")
                        .WithMany("StudentTests")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentTests_Students");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Test", "Test")
                        .WithMany("StudentTests")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_StudentTests_Tests");

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StudentTestLog", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Student", "Student")
                        .WithMany("StudentTestLogs")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentTestLogs_Students");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Test", "Test")
                        .WithMany("StudentTestLogs")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_StudentTestLogs_Tests");

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Test", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Center", "Center")
                        .WithMany("Tests")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK_Tests_Centers");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Language", "Language")
                        .WithMany("Tests")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Tests_Languages");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Grade", "Sector")
                        .WithMany("Tests")
                        .HasForeignKey("SectorId")
                        .HasConstraintName("FK_Tests_Sectors");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Subject", "Subject")
                        .WithMany("Tests")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_Tests_Subjects");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.TestCategory", "TestCategory")
                        .WithMany("Tests")
                        .HasForeignKey("TestCategoryId")
                        .HasConstraintName("FK_Tests_TestCategories");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.TestSecurityLevel", "TestSecurityLevel")
                        .WithMany("Tests")
                        .HasForeignKey("TestSecurityLevelId")
                        .HasConstraintName("FK_Tests_TestSecurityLevels");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.TestType", "TestType")
                        .WithMany("Tests")
                        .HasForeignKey("TestTypeId")
                        .HasConstraintName("FK_Tests_TestTypes");

                    b.Navigation("Center");

                    b.Navigation("Language");

                    b.Navigation("Sector");

                    b.Navigation("Subject");

                    b.Navigation("TestCategory");

                    b.Navigation("TestSecurityLevel");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.TestQuestion", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Question", "Question")
                        .WithMany("TestQuestions")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_TestQuestions_Questions");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Test", "Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK_TestQuestions_Tests");

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.UploadedSourceDocument", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Test", "Test")
                        .WithMany("UploadedSourceDocuments")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_UploadedSourceDocuments_Tests");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.User", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Center", "Center")
                        .WithMany("Users")
                        .HasForeignKey("CenterId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Centers");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.CenterType", "CenterType")
                        .WithMany("Users")
                        .HasForeignKey("CenterTypeId")
                        .HasConstraintName("FK_Users_CenterTypes");

                    b.Navigation("Center");

                    b.Navigation("CenterType");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.UserDocumentAnswer", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Student", "Student")
                        .WithMany("UserDocumentAnswers")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_UserDocumentAnswers_Students");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Test", "Test")
                        .WithMany("UserDocumentAnswers")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_UserDocumentAnswers_Tests");

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.UserDocumentAnswersBackup", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Student", "Student")
                        .WithMany("UserDocumentAnswersBackups")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_UserDocumentAnswersBackups_Students");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Test", "Test")
                        .WithMany("UserDocumentAnswersBackups")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_UserDocumentAnswersBackups_Tests");

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.UserRole", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Center", "Center")
                        .WithMany("UserRoles")
                        .HasForeignKey("CenterId")
                        .HasConstraintName("FK_UserRoles_Centers");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Roles");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRoles_Users");

                    b.Navigation("Center");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.UserScannedImage", b =>
                {
                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Student", "Student")
                        .WithMany("UserScannedImages")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_UserScannedImages_Students");

                    b.HasOne("ExamPortalApp.Contracts.Data.Entities.Test", "Test")
                        .WithMany("UserScannedImages")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_UserScannedImages_Tests");

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetApplication", b =>
                {
                    b.Navigation("AspnetMemberships");

                    b.Navigation("AspnetPaths");

                    b.Navigation("AspnetRoles");

                    b.Navigation("AspnetUsers");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetPath", b =>
                {
                    b.Navigation("AspnetPersonalizationAllUser");

                    b.Navigation("AspnetPersonalizationPerUsers");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.AspnetUser", b =>
                {
                    b.Navigation("AspnetMembership");

                    b.Navigation("AspnetPersonalizationPerUsers");

                    b.Navigation("AspnetProfile");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.BulkImportPerson", b =>
                {
                    b.Navigation("BulkImportSectorSubjects");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Center", b =>
                {
                    b.Navigation("RandomOtps");

                    b.Navigation("Sectors");

                    b.Navigation("Students");

                    b.Navigation("Tests");

                    b.Navigation("UserRoles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.CenterType", b =>
                {
                    b.Navigation("Centers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Grade", b =>
                {
                    b.Navigation("BulkImportSectorSubjects");

                    b.Navigation("RandomOtps");

                    b.Navigation("Stimuli");

                    b.Navigation("Students");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Image", b =>
                {
                    b.Navigation("StimulusImages");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Language", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Medium", b =>
                {
                    b.Navigation("StimulusMedia");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Province", b =>
                {
                    b.Navigation("Centers");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("TestQuestions");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Region", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Stimulus", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("StimulusImages");

                    b.Navigation("StimulusMedia");

                    b.Navigation("StimulusTexts");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StimulusType", b =>
                {
                    b.Navigation("Stimuli");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Student", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("BulkImportPeople");

                    b.Navigation("DisclaimerAccepts");

                    b.Navigation("InvigilatorStudentLinks");

                    b.Navigation("Irregularities");

                    b.Navigation("KeyPressTrackings");

                    b.Navigation("Screenshots");

                    b.Navigation("StudentRetrieves");

                    b.Navigation("StudentTestLogs");

                    b.Navigation("StudentTests");

                    b.Navigation("UserDocumentAnswers");

                    b.Navigation("UserDocumentAnswersBackups");

                    b.Navigation("UserScannedImages");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.StudentSubject", b =>
                {
                    b.Navigation("BulkImportSectorSubjects");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Subject", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("BulkImportSectorSubjects");

                    b.Navigation("RandomOtps");

                    b.Navigation("StudentSubjects");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.Test", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("DisclaimerAccepts");

                    b.Navigation("Irregularities");

                    b.Navigation("KeyPressTrackings");

                    b.Navigation("RandomOtps");

                    b.Navigation("Screenshots");

                    b.Navigation("StudentTestLogs");

                    b.Navigation("StudentTests");

                    b.Navigation("TestQuestions");

                    b.Navigation("UploadedSourceDocuments");

                    b.Navigation("UserDocumentAnswers");

                    b.Navigation("UserDocumentAnswersBackups");

                    b.Navigation("UserScannedImages");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.TestCategory", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.TestQuestion", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.TestSecurityLevel", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.TestType", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ExamPortalApp.Contracts.Data.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
